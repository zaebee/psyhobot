{"version":3,"sources":["webpack:///./web/$_lazy_route_resource lazy namespace object","webpack:///./web/app/app.component.html","webpack:///./web/app/app.component.ts","webpack:///./web/app/app.module.ts","webpack:///./web/app/chat-window/chat-window.component.html","webpack:///./web/app/chat-window/chat-window.component.ts","webpack:///./web/app/dialog-list/dialog-list.component.html","webpack:///./web/app/dialog-list/dialog-list.component.ts","webpack:///./web/app/material.module.ts","webpack:///./web/environments/environment.ts","webpack:///./web/main.ts"],"names":[],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,4CAA4C,WAAW;AACvD;AACA;AACA,4E;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kGCXA,2vCAAsD,MACpD;;;;;;m0BAA4D,IAC1D,4fAAiB,IAEnB,qJAAkC,KAChC,kgBAAiB,yBALwB,kBAAQ,EAArD,YAAsD,EAAT,SAAQ,GAC/B,sBAAW,EAAsB,kBAAM,EAA3D,YAA4D,EAAxC,SAAW,EAAsB,SAAM,GACzD,YAAiB,GAGjB,aAAiB,2BALrB,oHAAsD,GACpD,sjBAA4D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACA9D;AAAA;AAAA;IAAA;QAME,UAAK,GAAG,MAAM,CAAC;IACjB,CAAC;IAAD,mBAAC;AAAD,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACCD;AAAA;AAAA;IAAA;IAcyB,CAAC;IAAD,gBAAC;AAAD,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;yGCxB1B,gJAAyB,KACvB,iKAAqC,KACnC,uJAAgC,KAE9B,wKAAkD,KAChD,iKAA2C,KACzC,qJAA+B,uFAAU,MACzC,qHAAG,4XAEH,MAKJ,4KAAgD,KAE5C,sPAAI,KACF,0IAAmB,iNAA2B,MAIhD,uHAAI,KACF,uHAAI,KAEF,wLAA2D,kHAAO,MAElE,uKAAgD,KAY1D,0IAAmB,KACjB,wKAA2C,KACzC,4XAAmJ,KACnJ,uJAAgC,iFAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzC5C;AAAA;AAAA;AAAkD;AAElD;IAOE;IAAgB,CAAC;IAEjB,sCAAQ,GAAR;IACA,CAAC;IAEH,0BAAC;AAAD,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;yGCXG,08BAA8C,MAC3C,qUAAsB,+EAAiB,MACvC,wPAAmD,YAA3B;;wBAA0B;MAAlD,sqBAAmD,IAChD,owBAAU,6EAAI,2BAAd,aAAU,2BAHhB,kVAA8C,GACrB,kEAAiB,GACvC,iPAAmD,GAChD,2GAAU;yGANpB,iJAA2B,KACzB,sHAAI,uHAAO,MACX,kiBAAc,IACZ,mdAA8C,iDAA/B,mBAA8B,UAA7C,YAA8C,EAA/B,SAA8B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACHjD;AAAA;AAAA;AAAkD;AAGlD;IASE;QAFA,YAAO,GAAa,EAAE,CAAC;IAEP,CAAC;IAEjB,sCAAQ,GAAR;IACA,CAAC;IAEH,0BAAC;AAAD,CAAC;;;;;;;;;;;;;;ACXD;AAAA;AAAA;IAAA;IAsB8B,CAAC;IAAD,qBAAC;AAAD,CAAC;;;;;;;;;;;;;;AC5B/B;AAAA;AAAA,gFAAgF;AAChF,0EAA0E;AAC1E,gEAAgE;AAEzD,IAAM,WAAW,GAAG;IACzB,UAAU,EAAE,KAAK;CAClB,CAAC;AAEF;;;;;;GAMG;AACH,mEAAmE;;;;;;;;;;;;;ACfnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkB;AAC6B;AAIU;;;AAEzD,IAAI,qEAAW,CAAC,UAAU,EAAE;IAC1B,oEAAc,EAAE,CAAC;CAClB;AAED,2EAAwB,uBAAgB,CAAC,6EAAU;KAChD,KAAK,CAAC,aAAG,IAAI,cAAO,CAAC,KAAK,CAAC,GAAG,CAAC,EAAlB,CAAkB,CAAC,CAAC","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./web/$$_lazy_route_resource lazy recursive\";","<!--The content below is only a placeholder and can be replaced.-->\n<mat-drawer-container class=\"chat-container\" autosize>\n  <mat-drawer #drawer mode=\"side\" class=\"chat-sidenav\" opened>\n    <app-dialog-list></app-dialog-list>\n  </mat-drawer>\n  <div class=\"chat-sidenav-content\">\n    <app-chat-window></app-chat-window>\n  </div>\n</mat-drawer-container>\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.sass']\n})\nexport class AppComponent {\n  title = 'demo';\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from './app.component';\nimport { DialogListComponent } from './dialog-list/dialog-list.component';\nimport { ChatWindowComponent } from './chat-window/chat-window.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n\nimport { MaterialModule } from './material.module';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    DialogListComponent,\n    ChatWindowComponent\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    MaterialModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","<div class=\"widgetframe\">\n  <section id =\"app-chat\" class=\"chat\">\n    <main class=\"wrapper ai-window\">\n      <!-- Display Welcome Message -->\n      <div v-if=\"answers.length == 0 && online == true\">\n        <h1 class=\"title mdc-typography--headline\">\n          <div class=\"material-icons up\">arrow_left</div>\n          <p>\n          Выбери пользователя слева, чтобы просмтореть его диалоги\n          </p>\n        </h1>\n      </div>\n\n      <!-- Chat window -->\n      <table v-for=\"a in answers\" class=\"chat-window\">\n          <!-- Your messages -->\n          <tr>\n            <td class=\"bubble\">Привет, я психобот! помочь?</td>\n          </tr>\n\n          <!-- Dialogflow messages -->\n          <tr>\n            <td>\n              <!-- Bot message types / Speech -->\n              <div v-if=\"a.result.fulfillment.speech\" class=\"bubble bot\">Привет!</div>\n              <!-- Google Assistant output -->\n              <div v-for=\"r in a.result.fulfillment.messages\">\n                <!-- Bot message types / Card -->\n                <!-- Bot message types / List -->\n                <!-- Bot message types / Link Chip -->\n                <!-- Bot message types / Suggestion Chip -->\n              </div>\n            </td>\n          </tr>\n      </table>\n    </main>\n\n    <!-- The input -->\n    <div class=\"query\">\n      <div class=\"wrapper\" v-if=\"micro == false\">\n        <input aria-label=\"Ask me something\" autocomplete=\"off\" v-model=\"query\" class=\"queryform\" placeholder=\"Спроси что-нибудь...\" autofocus type=\"text\">\n        <i class=\"material-icons iicon\">send</i>\n      </div>\n    </div>\n  </section>\n</div>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-chat-window',\n  templateUrl: './chat-window.component.html',\n  styleUrls: ['./chat-window.component.sass']\n})\nexport class ChatWindowComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","<div class=\"listcontainer\">\n  <h2>Диалоги</h2>\n  <mat-nav-list>\n    <mat-list-item *ngFor=\"let dialog of dialogs\">\n       <a matLine href=\"...\">{{ dialog.name }}</a>\n       <button mat-icon-button (click)=\"showInfo(dialog)\">\n          <mat-icon>info</mat-icon>\n       </button>\n    </mat-list-item>\n  </mat-nav-list>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { Dialog } from '../dialog';\n\n@Component({\n  selector: 'app-dialog-list',\n  templateUrl: './dialog-list.component.html',\n  styleUrls: ['./dialog-list.component.sass']\n})\nexport class DialogListComponent implements OnInit {\n\n  dialogs: Dialog[] = [];\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { MatButtonModule, MatCardModule, MatIconModule, MatTabsModule, MatSidenavModule, MatListModule,\nMatFormFieldModule, MatSelectModule, MatInputModule, MatToolbarModule } from '@angular/material';\n\n@NgModule({\n  imports: [MatButtonModule,\n    MatCardModule,\n    MatIconModule,\n    MatTabsModule,\n    MatFormFieldModule,\n    MatSelectModule,\n    MatToolbarModule,\n    MatSidenavModule,\n    MatListModule,\n    MatInputModule],\n  exports: [MatButtonModule,\n    MatCardModule,\n    MatIconModule,\n    MatTabsModule,\n    MatFormFieldModule,\n    MatSelectModule,\n    MatToolbarModule,\n    MatSidenavModule,\n    MatListModule,\n    MatInputModule]\n})\nexport class MaterialModule { }\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import 'hammerjs';\nimport { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n\n"],"sourceRoot":""}